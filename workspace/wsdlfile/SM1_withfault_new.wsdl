package com.eastern.mujup.adminUI.svc.wsdl;

import java.io.ByteArrayInputStream;
import java.io.InputStream;
import java.io.UnsupportedEncodingException;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import java.util.Map;

import javax.wsdl.Binding;
import javax.wsdl.BindingOperation;
import javax.wsdl.Definition;
import javax.wsdl.Fault;
import javax.wsdl.Message;
import javax.wsdl.Operation;
import javax.wsdl.PortType;
import javax.wsdl.WSDLException;
import javax.wsdl.extensions.ExtensibilityElement;
import javax.wsdl.factory.WSDLFactory;
import javax.wsdl.xml.WSDLReader;
import javax.wsdl.xml.WSDLWriter;
import javax.xml.namespace.QName;

import org.xml.sax.InputSource;

import com.eastern.mujup.adminUI.svc.svcdataset.EsbSvcOpt;
import com.eastern.mujup.adminUI.svc.svcdataset.EsbSvcVersion;
import com.ibm.wsdl.OperationImpl;
import com.ibm.wsdl.extensions.soap.SOAPOperationImpl;
import com.ibm.wsdl.extensions.soap12.SOAP12OperationImpl;

public class WSDLCreater {

    public static void createWSDL(List<EsbSvcOpt> serviceOperationList, EsbSvcVersion serviceVersion) {
        try {
            // ??wsdl????
            String wsdlString = serviceVersion.getOriginalWsdl();
            InputStream in_withcode = new ByteArrayInputStream(wsdlString.getBytes("UTF-8"));
            
            // ???????wsdl?? ??????????wsdl_clob??
            WSDLFactory wsdlFactory = WSDLFactory.newInstance();
            WSDLReader reader = wsdlFactory.newWSDLReader();
            reader.setFeature("javax.wsdl.verbose", true);
            reader.setFeature("javax.wsdl.importDocuments", true);
            Definition def = reader.readWSDL("", new InputSource(in_withcode));
            
            //????PortTypes
            Iterator portTypeItr = def.getAllPortTypes().entrySet().iterator();
            while (portTypeItr.hasNext()) {          
                Map.Entry portTypeEntry = (Map.Entry) portTypeItr.next();
                PortType portType = (PortType) portTypeEntry.getValue();                                
                QName portTypeQname = (QName) portTypeEntry.getKey();                            
                // ??Operation List???????Operation
                List<Operation> portTypeOperationListModify = new ArrayList();
                //??porttype???Operation
                Iterator<Operation> portTypeOperationItr = portType.getOperations().iterator();
                while (portTypeOperationItr.hasNext()) {
                    Operation portTypeOperation = (OperationImpl) portTypeOperationItr.next();
                    // ??wsdl?OperationName??OperationList????srvOpt
                    EsbSvcOpt srvOpt = getSvrOptByOptName(serviceOperationList, portTypeOperation.getName());
                    portTypeOperation = replaceOptElement(srvOpt, portTypeOperation);
                    portTypeOperationListModify.add(portTypeOperation);
                }
                portType = replaceOptsOfPortType(portType, portTypeOperationListModify);                          
            }
            
            // ?? soap action,
            // binding--operation--bindingOperationElement(??SoapAction)--operation(??BindingOperation)--binding(??binding)
            Map bindingMap = def.getAllBindings();
            Iterator bindingItr = bindingMap.entrySet().iterator();
            while (bindingItr.hasNext()) {
                Map.Entry bindingEntry = (Map.Entry) bindingItr.next();
                Binding binding = (Binding) bindingEntry.getValue();
                // ??Operation List???????Operation
                List<BindingOperation> bindingOperationListModify = new ArrayList<BindingOperation>();
                Iterator bindingOperationItr = binding.getBindingOperations().iterator();
                while (bindingOperationItr.hasNext()) {
                    BindingOperation bindingOperation = (BindingOperation) bindingOperationItr.next();
                    EsbSvcOpt serviceOperation = getSvrOptByOptName(serviceOperationList, bindingOperation.getName());
                    if (serviceOperation!=null) {
                        ExtensibilityElement bindingOperationElement = (ExtensibilityElement) bindingOperation.getExtensibilityElements().get(0);
                        bindingOperationElement = setSoapAction(bindingOperationElement, serviceOperation.getOptSoapAction());
                        bindingOperationListModify.add(bindingOperation);
                    }
                }
                binding = replaceOptsOfBinding(binding, bindingOperationListModify);
            }
            WSDLWriter wirter = wsdlFactory.newWSDLWriter();
            wirter.writeWSDL(def, System.out);
        } catch (WSDLException e) {
            e.printStackTrace();
        } catch (UnsupportedEncodingException e) {
            e.printStackTrace();
        }
    }
    
    //??PortType????Operations ??????Operations
    private static PortType replaceOptsOfPortType(PortType portType, List<Operation> portTypeOptListModified){
        Iterator portTypeItr = portType.getOperations().iterator();
        while(portTypeItr.hasNext()){
            portTypeItr.next();
            portTypeItr.remove();
        }
        Iterator portTypeOptListItr = portTypeOptListModified.iterator();
        while(portTypeOptListItr.hasNext()){
            portType.addOperation((Operation) portTypeOptListItr.next());
        }
        return portType;      
    }
    
    //??binding????Binding Operations ??????Operations
    private static Binding replaceOptsOfBinding(Binding binding, List<BindingOperation> bindingOperationListModify){
        Iterator bindingOptsItr = binding.getBindingOperations().iterator();
        while(bindingOptsItr.hasNext()){
            bindingOptsItr.next();
            bindingOptsItr.remove();
        }
        Iterator bindingOperationListItr = bindingOperationListModify.iterator();
        while(bindingOperationListItr.hasNext()){
            binding.addBindingOperation((BindingOperation) bindingOperationListItr.next());
        }
        return binding;      
    }
    
    //??Operation??input output fault??,???????namespace???? ?????
    private static Operation replaceOptElement(EsbSvcOpt srvOpt, Operation portTypeOperation){
        if (srvOpt != null) {
            // ?? input message
            if (portTypeOperation.getInput() != null) {
                Message messageInput = portTypeOperation.getInput().getMessage();
                QName qNameInput = new QName(srvOpt.getOptInputMsgNs(), srvOpt.getOptInputMsgName());
                messageInput.setQName(qNameInput);
            }
            // ?? output message
            if (portTypeOperation.getOutput() != null) {
                Message messageOutput = portTypeOperation.getOutput().getMessage();
                QName qNameOutput = new QName(srvOpt.getOptOutputMsgNs(), srvOpt.getOptOutputMsgName());
                messageOutput.setQName(qNameOutput);
            }
            // ?? fault message
            Map faultMap = portTypeOperation.getFaults();
            Iterator faultItr = faultMap.entrySet().iterator();
            while (faultItr.hasNext()) {
                Map.Entry faultEntry = (Map.Entry) faultItr.next();
                Fault fault = (Fault) faultEntry.getValue();
                Message faultMessage = fault.getMessage();
                faultMessage.setQName(new QName(srvOpt.getOptFaultMsgNs(), srvOpt.getOptFaultMsgName()));
                break;
            }
        }
        return portTypeOperation;
    }
    //????ServiceOperation List???wsdl???????????Operation
    private static EsbSvcOpt getSvrOptByOptName(List<EsbSvcOpt> serviceOperationList, String optName) {
        Iterator<EsbSvcOpt> iterator = serviceOperationList.iterator();
        while (iterator.hasNext()) {
        	EsbSvcOpt serviceOperation = iterator.next();
            if (serviceOperation.getOptSrcEnName().equals(optName)) {
                return serviceOperation;
            }
        }
        return null;
    }

    //??Soap_Action??
    private static ExtensibilityElement setSoapAction(ExtensibilityElement extensibilityElement,
            String targetSoapAction) {
        if (extensibilityElement instanceof SOAP12OperationImpl) {
            ((SOAP12OperationImpl) extensibilityElement).setSoapActionURI(targetSoapAction);
            return extensibilityElement;
        } else if (extensibilityElement instanceof SOAPOperationImpl) {
            ((SOAPOperationImpl) extensibilityElement).setSoapActionURI(targetSoapAction);
            return extensibilityElement;
        }
        return null;
    }
    
}
